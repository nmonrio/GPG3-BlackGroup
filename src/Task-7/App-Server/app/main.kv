WindowManager:
	MainWindow:
	SliderWindow:
	ButtonWindow:
	JoystickWindow:
	TasksWindow:
	ServoSensor:



<MainWindow>:
	name: "main"
	
	GridLayout:
		cols: 1

		GridLayout:
			cols: 3

			TextInput:
				id: ip
				text: "10.10.10.10"
				multiline: False

			TextInput:
				id: port
				text: "65432"
				multiline: False

			Button:
				id: connect
				text: "Connect"
				on_release:
					app.send_commands.startClient(ip.text,port.text)
	
		Button:
			id: go_to_buttons
			text: "Buttons"
			on_release:
				app.root.current = "buttons"
				root.manager.transition.direction = "left"

		Button:
			id: go_to_slider
			text: "Sliders"
			on_release:
				app.root.current = "sliders"
				root.manager.transition.direction = "left"

		Button:
			id: go_to_joystick
			text: "Joystick"
			on_release:
				app.root.current = "joystick"
				root.manager.transition.direction = "left"
		Button:
			id: go_to_servo
			text: "Servo Sensor"
			on_release:
				app.root.current = "servo"
				root.manager.transition.direction = "left"
		Button:
			id: go_to_tasks
			text: "Tasks"
			on_release:
				app.root.current = "tasks"
				root.manager.transition.direction = "left"

#: import Joystick kivy.garden.joystick.Joystick

<JoystickWindow>:
	name: "joystick"
	joystick_instance: joystick_instance
	left_motor_label: left_motor_label
	right_motor_label: right_motor_label
	on_enter: 
		root.active = True
		self.send_values()

	GridLayout:
		cols:1
		GridLayout:
			cols: 2
			Label:
				id: x_position
				text: "x: "+str(round(joystick_instance.pad_x*100,0))
			Label:
				id: y_position
				text: "y: "+str(round(joystick_instance.pad_y*100,0))
			Label:
				id: left_motor_label
				text: "Left: "
			Label:
				id: right_motor_label
				text: "Right: "
		Joystick:
			id: joystick_instance
			on_touch_move:
				if ((root.active == True) and not (root.prev_x == joystick_instance.pad_x and root.prev_y == joystick_instance.pad_y)): \
				self.parent.parent.send_values(); \ 
				root.prev_x = joystick_instance.pad_x; \
				root.prev_y = joystick_instance.pad_y
			on_touch_down:
				if ((root.active == True) and not (root.prev_x == joystick_instance.pad_x and root.prev_y == joystick_instance.pad_y)): \
				self.parent.parent.send_values(); \ 
				root.prev_x = joystick_instance.pad_x; \
				root.prev_y = joystick_instance.pad_y
			on_touch_up:
				joystick_instance.pad_x = 0
				joystick_instance.pad_y = 0
				self.parent.parent.send_values()
		Label:
		Button:
			text: "Home"
			on_press:
				app.root.current = "main"
				root.manager.transition.direction = "right"
				self.parent.parent.send_values()
				root.active = False

<SliderWindow>:
	name: "sliders"
	on_enter: 
		root.active = True
		self.send_values()
	left_slider: left_slider
	right_slider: right_slider
	
	GridLayout:
		cols: 1

		GridLayout:
			cols: 2

			GridLayout:
				cols: 1
				Slider:
					id: left_slider
					min: -100
					max: 100
					value: 0
					step: 1
					orientation: 'vertical'
					on_touch_move:
						if ((root.active == True) and not (root.prev_left == left_slider.value and root.prev_right == right_slider.value)): \
						self.parent.parent.parent.parent.send_values(); \ 
						root.prev_left = left_slider.value; \
						root.prev_right = right_slider.value
					on_touch_down:
						if ((root.active == True) and not (root.prev_left == left_slider.value and root.prev_right == right_slider.value)): \
						self.parent.parent.parent.parent.send_values(); \ 
						root.prev_left = left_slider.value; \
						root.prev_right = right_slider.value


				Label:
					text: str(left_slider.value)

			GridLayout:
				cols: 1
				Slider:
					id: right_slider
					min: -100
					max: 100
					value: 0
					step: 1
					orientation: 'vertical'
					on_touch_down:
						if ((root.active == True) and not (root.prev_left == left_slider.value and root.prev_right == right_slider.value)): \
						self.parent.parent.parent.parent.send_values(); \ 
						root.prev_left = left_slider.value; \
						root.prev_right = right_slider.value
				Label:
					text: str(right_slider.value)
		GridLayout:
			cols: 1
			Button:
				text: "Stop"
				on_press:
					left_slider.value = 0
					right_slider.value = 0
					self.parent.parent.parent.send_values()
			Button:
				text: "Home"
				on_press:
					left_slider.value = 0
					right_slider.value = 0
					self.parent.parent.parent.send_values()
					app.root.current = "main"
					root.manager.transition.direction = "right"
					root.active = False


<ButtonWindow>:
	name: "buttons"

	GridLayout:
		cols: 1

		GridLayout:

			cols: 3

			Button:
				id: forLeft
				text: "Forward Left"
				on_release:
					app.send_commands.sendMessage("q")

			Button:
				id: forward
				text: "Forward"
				on_release:
					app.send_commands.sendMessage("w")
			
			Button:
				id: forRight
				text: "Forward Right"
				on_release:
					app.send_commands.sendMessage("e")
		GridLayout:

			cols: 3

			Button:
				id: turnLeft
				text: "Left"
				on_release:
					app.send_commands.sendMessage("a")
			
			Button:
				id: stop
				text: "Stop"
				on_release:
					app.send_commands.sendMessage(" ")
			
			Button:
				id: turnRight
				text: "Right"
				on_release:
					app.send_commands.sendMessage("d")
		GridLayout:

			cols: 3

			Button:
				id: backLeft
				text: "Backward Left"
				on_release:
					app.send_commands.sendMessage("z")
			
			Button:
				id: backward
				text: "Backward"
				on_release:
					app.send_commands.sendMessage("s")
			
			Button:
				id: backRight
				text: "Backward Right"
				on_release:
					app.send_commands.sendMessage("x")
		GridLayout:

			cols: 3

			Button:
				id: program1
				text: "Program 1"
				on_release:
					app.send_commands.sendMessage("1")
			
			Button:
				id: program2
				text: "Program 2"
				on_release:
					app.send_commands.sendMessage("2")
			
			Button:
				id: program3
				text: "Program 3"
				on_release:
					app.send_commands.sendMessage("3")
		
		Button:
			text: "Home"
			on_release: 
				app.root.current = "main"
				root.manager.transition.direction = "right"

<TasksWindow>:
	name: "tasks"

	GridLayout:
		cols: 1
		GridLayout:
			cols: 2

			Button:
				text: "Task 2"
				on_release: app.send_commands.sendMessage("task2")
			Label:
				text: "Task 2: Drawing Geometrical Shapes"
				text_size: self.width, None
				size: self.texture_size
				halign: 'center'
				padding_x: 30
				pos_hint: {"x":0, "top":1}
		GridLayout:
			cols: 2
			Button:
				text: "Task 3"
				on_release: app.send_commands.sendMessage("task3")
			Label:
				text: "Task 3: Finding The Object"
				text_size: self.width, None
				size: self.texture_size
				halign: 'center'
				padding_x: 30
				pos_hint: {"x":0, "top":1}
		GridLayout:
			cols: 2
			Button:
				text: "Task 4"
				on_release: app.send_commands.sendMessage("task4")
			Label:
				text: "Task 4: Description"
				text_size: self.width, None
				size: self.texture_size
				halign: 'center'
				padding_x: 30
				pos_hint: {"x":0, "top":1}
		GridLayout:
			cols: 2
			Button:
				text: "Task 5"
				on_release: app.send_commands.sendMessage("task5")
			Label:
				text: "Task 5: Description"
				text_size: self.width, None
				size: self.texture_size
				halign: 'center'
				padding_x: 30
				pos_hint: {"x":0, "top":1}
		GridLayout:
			cols: 2
			Button:
				text: "Task 6"
				on_release: app.send_commands.sendMessage("task6")
			Label:
				text: "Task 6: Description"
				text_size: self.width, None
				size: self.texture_size
				halign: 'center'
				padding_x: 30
				pos_hint: {"x":0, "top":1}
		Button:
			text: "Home"
			on_release: 
				app.root.current = "main"
				root.manager.transition.direction = "right"

<ServoSensor>:
	name: "servo"
	measurement:measurement
	GridLayout:
		cols: 1
		Label:
			text_size: self.width, None
			size: self.texture_size
			halign: 'center'
			padding_x: 30
			text: "Move the Servo with the arrows. Press o to rotate home. Press Measure to read the sensor"
			pos_hint: {"x":0, "top":1}
		GridLayout:
			cols: 3
			Button:
				text: "<"
				on_release: app.send_commands.sendMessage("servol")
			Button:
				text: "o"
				on_release: app.send_commands.sendMessage("servoh")
			Button:
				text: ">"
				on_release: app.send_commands.sendMessage("servor")
		Button:
			text: "Measure"
			on_release: 
				app.send_commands.sendMessage("measure")
				self.parent.parent.measurement.text = self.parent.parent.measurement_value
		Label:
			id: measurement
			text: "n/a"
		Button:
			text: "Home"
			on_release: 
				app.root.current = "main"
				root.manager.transition.direction = "right"


<popupConnectionError>:
	Label:
		text_size: self.width, None
		size: self.texture_size
		halign: 'center'
		padding_x: 30
		text: "Could not connect to the server. Please, check that you have entered the correct IP and Port and try again."
		pos_hint: {"x":0, "top":1}

<popupConnectionSuccess>:
	Label:
		text_size: self.width, None
		size: self.texture_size
		halign: 'center'
		padding_x: 30
		text: "Connected! You are ready to drive."
		pos_hint: {"x":0, "top":1}